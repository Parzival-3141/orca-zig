///////////////////////////////////////////////////////////////////////////////
// Generated Zig bindings for:
// API: gles2
// Profile: common
// Versions considered: 2\.[0-9]|3\.[01]
// Versions emitted: .*
// Default extensions included: None
// Additional extensions included: _nomatch_^
// Extensions removed: _nomatch_^
///////////////////////////////////////////////////////////////////////////////

const v2_0 = struct {
	const GLbyte = i8;
	const GLclampf = f32;
	const GLfixed = i32;
	const GLshort = i16;
	const GLushort = u16;
	const GLvoid = void;
	const GLsync = *anyopaque;
	const GLint64 = i64;
	const GLuint64 = u64;
	const GLenum = c_uint;
	const GLuint = c_uint;
	const GLchar = i8;
	const GLfloat = f32;
	const GLsizeiptr = usize;
	const GLintptr = isize;
	const GLbitfield = c_uint;
	const GLint = c_int;
	const GLboolean = u8;
	const GLsizei = c_int;
	const GLubyte = u8;
	const GL_DEPTH_BUFFER_BIT: GLenum = 0x00000100;
	const GL_STENCIL_BUFFER_BIT: GLenum = 0x00000400;
	const GL_COLOR_BUFFER_BIT: GLenum = 0x00004000;
	const GL_FALSE: GLenum = 0;
	const GL_TRUE: GLenum = 1;
	const GL_POINTS: GLenum = 0x0000;
	const GL_LINES: GLenum = 0x0001;
	const GL_LINE_LOOP: GLenum = 0x0002;
	const GL_LINE_STRIP: GLenum = 0x0003;
	const GL_TRIANGLES: GLenum = 0x0004;
	const GL_TRIANGLE_STRIP: GLenum = 0x0005;
	const GL_TRIANGLE_FAN: GLenum = 0x0006;
	const GL_ZERO: GLenum = 0;
	const GL_ONE: GLenum = 1;
	const GL_SRC_COLOR: GLenum = 0x0300;
	const GL_ONE_MINUS_SRC_COLOR: GLenum = 0x0301;
	const GL_SRC_ALPHA: GLenum = 0x0302;
	const GL_ONE_MINUS_SRC_ALPHA: GLenum = 0x0303;
	const GL_DST_ALPHA: GLenum = 0x0304;
	const GL_ONE_MINUS_DST_ALPHA: GLenum = 0x0305;
	const GL_DST_COLOR: GLenum = 0x0306;
	const GL_ONE_MINUS_DST_COLOR: GLenum = 0x0307;
	const GL_SRC_ALPHA_SATURATE: GLenum = 0x0308;
	const GL_FUNC_ADD: GLenum = 0x8006;
	const GL_BLEND_EQUATION: GLenum = 0x8009;
	const GL_BLEND_EQUATION_RGB: GLenum = 0x8009;
	const GL_BLEND_EQUATION_ALPHA: GLenum = 0x883D;
	const GL_FUNC_SUBTRACT: GLenum = 0x800A;
	const GL_FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
	const GL_BLEND_DST_RGB: GLenum = 0x80C8;
	const GL_BLEND_SRC_RGB: GLenum = 0x80C9;
	const GL_BLEND_DST_ALPHA: GLenum = 0x80CA;
	const GL_BLEND_SRC_ALPHA: GLenum = 0x80CB;
	const GL_CONSTANT_COLOR: GLenum = 0x8001;
	const GL_ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
	const GL_CONSTANT_ALPHA: GLenum = 0x8003;
	const GL_ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
	const GL_BLEND_COLOR: GLenum = 0x8005;
	const GL_ARRAY_BUFFER: GLenum = 0x8892;
	const GL_ELEMENT_ARRAY_BUFFER: GLenum = 0x8893;
	const GL_ARRAY_BUFFER_BINDING: GLenum = 0x8894;
	const GL_ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895;
	const GL_STREAM_DRAW: GLenum = 0x88E0;
	const GL_STATIC_DRAW: GLenum = 0x88E4;
	const GL_DYNAMIC_DRAW: GLenum = 0x88E8;
	const GL_BUFFER_SIZE: GLenum = 0x8764;
	const GL_BUFFER_USAGE: GLenum = 0x8765;
	const GL_CURRENT_VERTEX_ATTRIB: GLenum = 0x8626;
	const GL_FRONT: GLenum = 0x0404;
	const GL_BACK: GLenum = 0x0405;
	const GL_FRONT_AND_BACK: GLenum = 0x0408;
	const GL_TEXTURE_2D: GLenum = 0x0DE1;
	const GL_CULL_FACE: GLenum = 0x0B44;
	const GL_BLEND: GLenum = 0x0BE2;
	const GL_DITHER: GLenum = 0x0BD0;
	const GL_STENCIL_TEST: GLenum = 0x0B90;
	const GL_DEPTH_TEST: GLenum = 0x0B71;
	const GL_SCISSOR_TEST: GLenum = 0x0C11;
	const GL_POLYGON_OFFSET_FILL: GLenum = 0x8037;
	const GL_SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E;
	const GL_SAMPLE_COVERAGE: GLenum = 0x80A0;
	const GL_NO_ERROR: GLenum = 0;
	const GL_INVALID_ENUM: GLenum = 0x0500;
	const GL_INVALID_VALUE: GLenum = 0x0501;
	const GL_INVALID_OPERATION: GLenum = 0x0502;
	const GL_OUT_OF_MEMORY: GLenum = 0x0505;
	const GL_CW: GLenum = 0x0900;
	const GL_CCW: GLenum = 0x0901;
	const GL_LINE_WIDTH: GLenum = 0x0B21;
	const GL_ALIASED_POINT_SIZE_RANGE: GLenum = 0x846D;
	const GL_ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E;
	const GL_CULL_FACE_MODE: GLenum = 0x0B45;
	const GL_FRONT_FACE: GLenum = 0x0B46;
	const GL_DEPTH_RANGE: GLenum = 0x0B70;
	const GL_DEPTH_WRITEMASK: GLenum = 0x0B72;
	const GL_DEPTH_CLEAR_VALUE: GLenum = 0x0B73;
	const GL_DEPTH_FUNC: GLenum = 0x0B74;
	const GL_STENCIL_CLEAR_VALUE: GLenum = 0x0B91;
	const GL_STENCIL_FUNC: GLenum = 0x0B92;
	const GL_STENCIL_FAIL: GLenum = 0x0B94;
	const GL_STENCIL_PASS_DEPTH_FAIL: GLenum = 0x0B95;
	const GL_STENCIL_PASS_DEPTH_PASS: GLenum = 0x0B96;
	const GL_STENCIL_REF: GLenum = 0x0B97;
	const GL_STENCIL_VALUE_MASK: GLenum = 0x0B93;
	const GL_STENCIL_WRITEMASK: GLenum = 0x0B98;
	const GL_STENCIL_BACK_FUNC: GLenum = 0x8800;
	const GL_STENCIL_BACK_FAIL: GLenum = 0x8801;
	const GL_STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802;
	const GL_STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803;
	const GL_STENCIL_BACK_REF: GLenum = 0x8CA3;
	const GL_STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4;
	const GL_STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5;
	const GL_VIEWPORT: GLenum = 0x0BA2;
	const GL_SCISSOR_BOX: GLenum = 0x0C10;
	const GL_COLOR_CLEAR_VALUE: GLenum = 0x0C22;
	const GL_COLOR_WRITEMASK: GLenum = 0x0C23;
	const GL_UNPACK_ALIGNMENT: GLenum = 0x0CF5;
	const GL_PACK_ALIGNMENT: GLenum = 0x0D05;
	const GL_MAX_TEXTURE_SIZE: GLenum = 0x0D33;
	const GL_MAX_VIEWPORT_DIMS: GLenum = 0x0D3A;
	const GL_SUBPIXEL_BITS: GLenum = 0x0D50;
	const GL_RED_BITS: GLenum = 0x0D52;
	const GL_GREEN_BITS: GLenum = 0x0D53;
	const GL_BLUE_BITS: GLenum = 0x0D54;
	const GL_ALPHA_BITS: GLenum = 0x0D55;
	const GL_DEPTH_BITS: GLenum = 0x0D56;
	const GL_STENCIL_BITS: GLenum = 0x0D57;
	const GL_POLYGON_OFFSET_UNITS: GLenum = 0x2A00;
	const GL_POLYGON_OFFSET_FACTOR: GLenum = 0x8038;
	const GL_TEXTURE_BINDING_2D: GLenum = 0x8069;
	const GL_SAMPLE_BUFFERS: GLenum = 0x80A8;
	const GL_SAMPLES: GLenum = 0x80A9;
	const GL_SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA;
	const GL_SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB;
	const GL_NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A2;
	const GL_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3;
	const GL_DONT_CARE: GLenum = 0x1100;
	const GL_FASTEST: GLenum = 0x1101;
	const GL_NICEST: GLenum = 0x1102;
	const GL_GENERATE_MIPMAP_HINT: GLenum = 0x8192;
	const GL_BYTE: GLenum = 0x1400;
	const GL_UNSIGNED_BYTE: GLenum = 0x1401;
	const GL_SHORT: GLenum = 0x1402;
	const GL_UNSIGNED_SHORT: GLenum = 0x1403;
	const GL_INT: GLenum = 0x1404;
	const GL_UNSIGNED_INT: GLenum = 0x1405;
	const GL_FLOAT: GLenum = 0x1406;
	const GL_FIXED: GLenum = 0x140C;
	const GL_DEPTH_COMPONENT: GLenum = 0x1902;
	const GL_ALPHA: GLenum = 0x1906;
	const GL_RGB: GLenum = 0x1907;
	const GL_RGBA: GLenum = 0x1908;
	const GL_LUMINANCE: GLenum = 0x1909;
	const GL_LUMINANCE_ALPHA: GLenum = 0x190A;
	const GL_UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
	const GL_UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
	const GL_UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
	const GL_FRAGMENT_SHADER: GLenum = 0x8B30;
	const GL_VERTEX_SHADER: GLenum = 0x8B31;
	const GL_MAX_VERTEX_ATTRIBS: GLenum = 0x8869;
	const GL_MAX_VERTEX_UNIFORM_VECTORS: GLenum = 0x8DFB;
	const GL_MAX_VARYING_VECTORS: GLenum = 0x8DFC;
	const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D;
	const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C;
	const GL_MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872;
	const GL_MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = 0x8DFD;
	const GL_SHADER_TYPE: GLenum = 0x8B4F;
	const GL_DELETE_STATUS: GLenum = 0x8B80;
	const GL_LINK_STATUS: GLenum = 0x8B82;
	const GL_VALIDATE_STATUS: GLenum = 0x8B83;
	const GL_ATTACHED_SHADERS: GLenum = 0x8B85;
	const GL_ACTIVE_UNIFORMS: GLenum = 0x8B86;
	const GL_ACTIVE_UNIFORM_MAX_LENGTH: GLenum = 0x8B87;
	const GL_ACTIVE_ATTRIBUTES: GLenum = 0x8B89;
	const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = 0x8B8A;
	const GL_SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C;
	const GL_CURRENT_PROGRAM: GLenum = 0x8B8D;
	const GL_NEVER: GLenum = 0x0200;
	const GL_LESS: GLenum = 0x0201;
	const GL_EQUAL: GLenum = 0x0202;
	const GL_LEQUAL: GLenum = 0x0203;
	const GL_GREATER: GLenum = 0x0204;
	const GL_NOTEQUAL: GLenum = 0x0205;
	const GL_GEQUAL: GLenum = 0x0206;
	const GL_ALWAYS: GLenum = 0x0207;
	const GL_KEEP: GLenum = 0x1E00;
	const GL_REPLACE: GLenum = 0x1E01;
	const GL_INCR: GLenum = 0x1E02;
	const GL_DECR: GLenum = 0x1E03;
	const GL_INVERT: GLenum = 0x150A;
	const GL_INCR_WRAP: GLenum = 0x8507;
	const GL_DECR_WRAP: GLenum = 0x8508;
	const GL_VENDOR: GLenum = 0x1F00;
	const GL_RENDERER: GLenum = 0x1F01;
	const GL_VERSION: GLenum = 0x1F02;
	const GL_EXTENSIONS: GLenum = 0x1F03;
	const GL_NEAREST: GLenum = 0x2600;
	const GL_LINEAR: GLenum = 0x2601;
	const GL_NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
	const GL_LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
	const GL_NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
	const GL_LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
	const GL_TEXTURE_MAG_FILTER: GLenum = 0x2800;
	const GL_TEXTURE_MIN_FILTER: GLenum = 0x2801;
	const GL_TEXTURE_WRAP_S: GLenum = 0x2802;
	const GL_TEXTURE_WRAP_T: GLenum = 0x2803;
	const GL_TEXTURE: GLenum = 0x1702;
	const GL_TEXTURE_CUBE_MAP: GLenum = 0x8513;
	const GL_TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514;
	const GL_TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515;
	const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516;
	const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517;
	const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518;
	const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519;
	const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A;
	const GL_MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C;
	const GL_TEXTURE0: GLenum = 0x84C0;
	const GL_TEXTURE1: GLenum = 0x84C1;
	const GL_TEXTURE2: GLenum = 0x84C2;
	const GL_TEXTURE3: GLenum = 0x84C3;
	const GL_TEXTURE4: GLenum = 0x84C4;
	const GL_TEXTURE5: GLenum = 0x84C5;
	const GL_TEXTURE6: GLenum = 0x84C6;
	const GL_TEXTURE7: GLenum = 0x84C7;
	const GL_TEXTURE8: GLenum = 0x84C8;
	const GL_TEXTURE9: GLenum = 0x84C9;
	const GL_TEXTURE10: GLenum = 0x84CA;
	const GL_TEXTURE11: GLenum = 0x84CB;
	const GL_TEXTURE12: GLenum = 0x84CC;
	const GL_TEXTURE13: GLenum = 0x84CD;
	const GL_TEXTURE14: GLenum = 0x84CE;
	const GL_TEXTURE15: GLenum = 0x84CF;
	const GL_TEXTURE16: GLenum = 0x84D0;
	const GL_TEXTURE17: GLenum = 0x84D1;
	const GL_TEXTURE18: GLenum = 0x84D2;
	const GL_TEXTURE19: GLenum = 0x84D3;
	const GL_TEXTURE20: GLenum = 0x84D4;
	const GL_TEXTURE21: GLenum = 0x84D5;
	const GL_TEXTURE22: GLenum = 0x84D6;
	const GL_TEXTURE23: GLenum = 0x84D7;
	const GL_TEXTURE24: GLenum = 0x84D8;
	const GL_TEXTURE25: GLenum = 0x84D9;
	const GL_TEXTURE26: GLenum = 0x84DA;
	const GL_TEXTURE27: GLenum = 0x84DB;
	const GL_TEXTURE28: GLenum = 0x84DC;
	const GL_TEXTURE29: GLenum = 0x84DD;
	const GL_TEXTURE30: GLenum = 0x84DE;
	const GL_TEXTURE31: GLenum = 0x84DF;
	const GL_ACTIVE_TEXTURE: GLenum = 0x84E0;
	const GL_REPEAT: GLenum = 0x2901;
	const GL_CLAMP_TO_EDGE: GLenum = 0x812F;
	const GL_MIRRORED_REPEAT: GLenum = 0x8370;
	const GL_FLOAT_VEC2: GLenum = 0x8B50;
	const GL_FLOAT_VEC3: GLenum = 0x8B51;
	const GL_FLOAT_VEC4: GLenum = 0x8B52;
	const GL_INT_VEC2: GLenum = 0x8B53;
	const GL_INT_VEC3: GLenum = 0x8B54;
	const GL_INT_VEC4: GLenum = 0x8B55;
	const GL_BOOL: GLenum = 0x8B56;
	const GL_BOOL_VEC2: GLenum = 0x8B57;
	const GL_BOOL_VEC3: GLenum = 0x8B58;
	const GL_BOOL_VEC4: GLenum = 0x8B59;
	const GL_FLOAT_MAT2: GLenum = 0x8B5A;
	const GL_FLOAT_MAT3: GLenum = 0x8B5B;
	const GL_FLOAT_MAT4: GLenum = 0x8B5C;
	const GL_SAMPLER_2D: GLenum = 0x8B5E;
	const GL_SAMPLER_CUBE: GLenum = 0x8B60;
	const GL_VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622;
	const GL_VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623;
	const GL_VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624;
	const GL_VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625;
	const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A;
	const GL_VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645;
	const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F;
	const GL_IMPLEMENTATION_COLOR_READ_TYPE: GLenum = 0x8B9A;
	const GL_IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = 0x8B9B;
	const GL_COMPILE_STATUS: GLenum = 0x8B81;
	const GL_INFO_LOG_LENGTH: GLenum = 0x8B84;
	const GL_SHADER_SOURCE_LENGTH: GLenum = 0x8B88;
	const GL_SHADER_COMPILER: GLenum = 0x8DFA;
	const GL_SHADER_BINARY_FORMATS: GLenum = 0x8DF8;
	const GL_NUM_SHADER_BINARY_FORMATS: GLenum = 0x8DF9;
	const GL_LOW_FLOAT: GLenum = 0x8DF0;
	const GL_MEDIUM_FLOAT: GLenum = 0x8DF1;
	const GL_HIGH_FLOAT: GLenum = 0x8DF2;
	const GL_LOW_INT: GLenum = 0x8DF3;
	const GL_MEDIUM_INT: GLenum = 0x8DF4;
	const GL_HIGH_INT: GLenum = 0x8DF5;
	const GL_FRAMEBUFFER: GLenum = 0x8D40;
	const GL_RENDERBUFFER: GLenum = 0x8D41;
	const GL_RGBA4: GLenum = 0x8056;
	const GL_RGB5_A1: GLenum = 0x8057;
	const GL_RGB565: GLenum = 0x8D62;
	const GL_DEPTH_COMPONENT16: GLenum = 0x81A5;
	const GL_STENCIL_INDEX8: GLenum = 0x8D48;
	const GL_RENDERBUFFER_WIDTH: GLenum = 0x8D42;
	const GL_RENDERBUFFER_HEIGHT: GLenum = 0x8D43;
	const GL_RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44;
	const GL_RENDERBUFFER_RED_SIZE: GLenum = 0x8D50;
	const GL_RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51;
	const GL_RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52;
	const GL_RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53;
	const GL_RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54;
	const GL_RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55;
	const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0;
	const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1;
	const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2;
	const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3;
	const GL_COLOR_ATTACHMENT0: GLenum = 0x8CE0;
	const GL_DEPTH_ATTACHMENT: GLenum = 0x8D00;
	const GL_STENCIL_ATTACHMENT: GLenum = 0x8D20;
	const GL_NONE: GLenum = 0;
	const GL_FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5;
	const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6;
	const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7;
	const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = 0x8CD9;
	const GL_FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD;
	const GL_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
	const GL_RENDERBUFFER_BINDING: GLenum = 0x8CA7;
	const GL_MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8;
	const GL_INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x0506;
	extern fn glActiveTexture(texture: GLenum) void;
	extern fn glAttachShader(program: GLuint, shader: GLuint) void;
	extern fn glBindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar) void;
	extern fn glBindBuffer(target: GLenum, buffer: GLuint) void;
	extern fn glBindFramebuffer(target: GLenum, framebuffer: GLuint) void;
	extern fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint) void;
	extern fn glBindTexture(target: GLenum, texture: GLuint) void;
	extern fn glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
	extern fn glBlendEquation(mode: GLenum) void;
	extern fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) void;
	extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
	extern fn glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void;
	extern fn glBufferData(target: GLenum, size: GLsizeiptr, data: *const void, usage: GLenum) void;
	extern fn glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const void) void;
	extern fn glCheckFramebufferStatus(target: GLenum) GLenum;
	extern fn glClear(mask: GLbitfield) void;
	extern fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
	extern fn glClearDepthf(d: GLfloat) void;
	extern fn glClearStencil(s: GLint) void;
	extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
	extern fn glCompileShader(shader: GLuint) void;
	extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const void) void;
	extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const void) void;
	extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
	extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
	extern fn glCreateProgram() GLuint;
	extern fn glCreateShader(type: GLenum) GLuint;
	extern fn glCullFace(mode: GLenum) void;
	extern fn glDeleteBuffers(n: GLsizei, buffers: *const GLuint) void;
	extern fn glDeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint) void;
	extern fn glDeleteProgram(program: GLuint) void;
	extern fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint) void;
	extern fn glDeleteShader(shader: GLuint) void;
	extern fn glDeleteTextures(n: GLsizei, textures: *const GLuint) void;
	extern fn glDepthFunc(func: GLenum) void;
	extern fn glDepthMask(flag: GLboolean) void;
	extern fn glDepthRangef(n: GLfloat, f: GLfloat) void;
	extern fn glDetachShader(program: GLuint, shader: GLuint) void;
	extern fn glDisable(cap: GLenum) void;
	extern fn glDisableVertexAttribArray(index: GLuint) void;
	extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
	extern fn glDrawElements(mode: GLenum, count: GLsizei, type: GLenum, indices: *const void) void;
	extern fn glEnable(cap: GLenum) void;
	extern fn glEnableVertexAttribArray(index: GLuint) void;
	extern fn glFinish() void;
	extern fn glFlush() void;
	extern fn glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
	extern fn glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
	extern fn glFrontFace(mode: GLenum) void;
	extern fn glGenBuffers(n: GLsizei, buffers: * GLuint) void;
	extern fn glGenerateMipmap(target: GLenum) void;
	extern fn glGenFramebuffers(n: GLsizei, framebuffers: * GLuint) void;
	extern fn glGenRenderbuffers(n: GLsizei, renderbuffers: * GLuint) void;
	extern fn glGenTextures(n: GLsizei, textures: * GLuint) void;
	extern fn glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: * GLsizei, size: * GLint, type: * GLenum, name: * GLchar) void;
	extern fn glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: * GLsizei, size: * GLint, type: * GLenum, name: * GLchar) void;
	extern fn glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: * GLsizei, shaders: * GLuint) void;
	extern fn glGetAttribLocation(program: GLuint, name: *const GLchar) GLint;
	extern fn glGetBooleanv(pname: GLenum, data: * GLboolean) void;
	extern fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetError() GLenum;
	extern fn glGetFloatv(pname: GLenum, data: * GLfloat) void;
	extern fn glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetIntegerv(pname: GLenum, data: * GLint) void;
	extern fn glGetProgramiv(program: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: * GLsizei, infoLog: * GLchar) void;
	extern fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetShaderiv(shader: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: * GLsizei, infoLog: * GLchar) void;
	extern fn glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: * GLint, precision: * GLint) void;
	extern fn glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: * GLsizei, source: * GLchar) void;
	extern fn glGetString(name: GLenum) [*]const GLubyte;
	extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: * GLfloat) void;
	extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetUniformfv(program: GLuint, location: GLint, params: * GLfloat) void;
	extern fn glGetUniformiv(program: GLuint, location: GLint, params: * GLint) void;
	extern fn glGetUniformLocation(program: GLuint, name: *const GLchar) GLint;
	extern fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: * GLfloat) void;
	extern fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: ** void) void;
	extern fn glHint(target: GLenum, mode: GLenum) void;
	extern fn glIsBuffer(buffer: GLuint) GLboolean;
	extern fn glIsEnabled(cap: GLenum) GLboolean;
	extern fn glIsFramebuffer(framebuffer: GLuint) GLboolean;
	extern fn glIsProgram(program: GLuint) GLboolean;
	extern fn glIsRenderbuffer(renderbuffer: GLuint) GLboolean;
	extern fn glIsShader(shader: GLuint) GLboolean;
	extern fn glIsTexture(texture: GLuint) GLboolean;
	extern fn glLineWidth(width: GLfloat) void;
	extern fn glLinkProgram(program: GLuint) void;
	extern fn glPixelStorei(pname: GLenum, param: GLint) void;
	extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
	extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: * void) void;
	extern fn glReleaseShaderCompiler() void;
	extern fn glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
	extern fn glSampleCoverage(value: GLfloat, invert: GLboolean) void;
	extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
	extern fn glShaderBinary(count: GLsizei, shaders: *const GLuint, binaryFormat: GLenum, binary: *const void, length: GLsizei) void;
	extern fn glShaderSource(shader: GLuint, count: GLsizei, string: *const*const GLchar, length: *const GLint) void;
	extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
	extern fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) void;
	extern fn glStencilMask(mask: GLuint) void;
	extern fn glStencilMaskSeparate(face: GLenum, mask: GLuint) void;
	extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
	extern fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) void;
	extern fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const void) void;
	extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
	extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) void;
	extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
	extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint) void;
	extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *const void) void;
	extern fn glUniform1f(location: GLint, v0: GLfloat) void;
	extern fn glUniform1fv(location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glUniform1i(location: GLint, v0: GLint) void;
	extern fn glUniform1iv(location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) void;
	extern fn glUniform2fv(location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glUniform2i(location: GLint, v0: GLint, v1: GLint) void;
	extern fn glUniform2iv(location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
	extern fn glUniform3fv(location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
	extern fn glUniform3iv(location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
	extern fn glUniform4fv(location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
	extern fn glUniform4iv(location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUseProgram(program: GLuint) void;
	extern fn glValidateProgram(program: GLuint) void;
	extern fn glVertexAttrib1f(index: GLuint, x: GLfloat) void;
	extern fn glVertexAttrib1fv(index: GLuint, v: *const GLfloat) void;
	extern fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) void;
	extern fn glVertexAttrib2fv(index: GLuint, v: *const GLfloat) void;
	extern fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
	extern fn glVertexAttrib3fv(index: GLuint, v: *const GLfloat) void;
	extern fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
	extern fn glVertexAttrib4fv(index: GLuint, v: *const GLfloat) void;
	extern fn glVertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const void) void;
	extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
};

const v3_0 = struct {
	usingnamespace v2_0;

	const GLbyte = v2_0.GLbyte;
	const GLclampf = v2_0.GLclampf;
	const GLfixed = v2_0.GLfixed;
	const GLshort = v2_0.GLshort;
	const GLushort = v2_0.GLushort;
	const GLvoid = v2_0.GLvoid;
	const GLsync = v2_0.GLsync;
	const GLint64 = v2_0.GLint64;
	const GLuint64 = v2_0.GLuint64;
	const GLenum = v2_0.GLenum;
	const GLuint = v2_0.GLuint;
	const GLchar = v2_0.GLchar;
	const GLfloat = v2_0.GLfloat;
	const GLsizeiptr = v2_0.GLsizeiptr;
	const GLintptr = v2_0.GLintptr;
	const GLbitfield = v2_0.GLbitfield;
	const GLint = v2_0.GLint;
	const GLboolean = v2_0.GLboolean;
	const GLsizei = v2_0.GLsizei;
	const GLubyte = v2_0.GLubyte;
	const GLhalf = u16;
	const GL_READ_BUFFER: GLenum = 0x0C02;
	const GL_UNPACK_ROW_LENGTH: GLenum = 0x0CF2;
	const GL_UNPACK_SKIP_ROWS: GLenum = 0x0CF3;
	const GL_UNPACK_SKIP_PIXELS: GLenum = 0x0CF4;
	const GL_PACK_ROW_LENGTH: GLenum = 0x0D02;
	const GL_PACK_SKIP_ROWS: GLenum = 0x0D03;
	const GL_PACK_SKIP_PIXELS: GLenum = 0x0D04;
	const GL_COLOR: GLenum = 0x1800;
	const GL_DEPTH: GLenum = 0x1801;
	const GL_STENCIL: GLenum = 0x1802;
	const GL_RED: GLenum = 0x1903;
	const GL_RGB8: GLenum = 0x8051;
	const GL_RGBA8: GLenum = 0x8058;
	const GL_RGB10_A2: GLenum = 0x8059;
	const GL_TEXTURE_BINDING_3D: GLenum = 0x806A;
	const GL_UNPACK_SKIP_IMAGES: GLenum = 0x806D;
	const GL_UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
	const GL_TEXTURE_3D: GLenum = 0x806F;
	const GL_TEXTURE_WRAP_R: GLenum = 0x8072;
	const GL_MAX_3D_TEXTURE_SIZE: GLenum = 0x8073;
	const GL_UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
	const GL_MAX_ELEMENTS_VERTICES: GLenum = 0x80E8;
	const GL_MAX_ELEMENTS_INDICES: GLenum = 0x80E9;
	const GL_TEXTURE_MIN_LOD: GLenum = 0x813A;
	const GL_TEXTURE_MAX_LOD: GLenum = 0x813B;
	const GL_TEXTURE_BASE_LEVEL: GLenum = 0x813C;
	const GL_TEXTURE_MAX_LEVEL: GLenum = 0x813D;
	const GL_MIN: GLenum = 0x8007;
	const GL_MAX: GLenum = 0x8008;
	const GL_DEPTH_COMPONENT24: GLenum = 0x81A6;
	const GL_MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD;
	const GL_TEXTURE_COMPARE_MODE: GLenum = 0x884C;
	const GL_TEXTURE_COMPARE_FUNC: GLenum = 0x884D;
	const GL_CURRENT_QUERY: GLenum = 0x8865;
	const GL_QUERY_RESULT: GLenum = 0x8866;
	const GL_QUERY_RESULT_AVAILABLE: GLenum = 0x8867;
	const GL_BUFFER_MAPPED: GLenum = 0x88BC;
	const GL_BUFFER_MAP_POINTER: GLenum = 0x88BD;
	const GL_STREAM_READ: GLenum = 0x88E1;
	const GL_STREAM_COPY: GLenum = 0x88E2;
	const GL_STATIC_READ: GLenum = 0x88E5;
	const GL_STATIC_COPY: GLenum = 0x88E6;
	const GL_DYNAMIC_READ: GLenum = 0x88E9;
	const GL_DYNAMIC_COPY: GLenum = 0x88EA;
	const GL_MAX_DRAW_BUFFERS: GLenum = 0x8824;
	const GL_DRAW_BUFFER0: GLenum = 0x8825;
	const GL_DRAW_BUFFER1: GLenum = 0x8826;
	const GL_DRAW_BUFFER2: GLenum = 0x8827;
	const GL_DRAW_BUFFER3: GLenum = 0x8828;
	const GL_DRAW_BUFFER4: GLenum = 0x8829;
	const GL_DRAW_BUFFER5: GLenum = 0x882A;
	const GL_DRAW_BUFFER6: GLenum = 0x882B;
	const GL_DRAW_BUFFER7: GLenum = 0x882C;
	const GL_DRAW_BUFFER8: GLenum = 0x882D;
	const GL_DRAW_BUFFER9: GLenum = 0x882E;
	const GL_DRAW_BUFFER10: GLenum = 0x882F;
	const GL_DRAW_BUFFER11: GLenum = 0x8830;
	const GL_DRAW_BUFFER12: GLenum = 0x8831;
	const GL_DRAW_BUFFER13: GLenum = 0x8832;
	const GL_DRAW_BUFFER14: GLenum = 0x8833;
	const GL_DRAW_BUFFER15: GLenum = 0x8834;
	const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49;
	const GL_MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A;
	const GL_SAMPLER_3D: GLenum = 0x8B5F;
	const GL_SAMPLER_2D_SHADOW: GLenum = 0x8B62;
	const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B;
	const GL_PIXEL_PACK_BUFFER: GLenum = 0x88EB;
	const GL_PIXEL_UNPACK_BUFFER: GLenum = 0x88EC;
	const GL_PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED;
	const GL_PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF;
	const GL_FLOAT_MAT2x3: GLenum = 0x8B65;
	const GL_FLOAT_MAT2x4: GLenum = 0x8B66;
	const GL_FLOAT_MAT3x2: GLenum = 0x8B67;
	const GL_FLOAT_MAT3x4: GLenum = 0x8B68;
	const GL_FLOAT_MAT4x2: GLenum = 0x8B69;
	const GL_FLOAT_MAT4x3: GLenum = 0x8B6A;
	const GL_SRGB: GLenum = 0x8C40;
	const GL_SRGB8: GLenum = 0x8C41;
	const GL_SRGB8_ALPHA8: GLenum = 0x8C43;
	const GL_COMPARE_REF_TO_TEXTURE: GLenum = 0x884E;
	const GL_MAJOR_VERSION: GLenum = 0x821B;
	const GL_MINOR_VERSION: GLenum = 0x821C;
	const GL_NUM_EXTENSIONS: GLenum = 0x821D;
	const GL_RGBA32F: GLenum = 0x8814;
	const GL_RGB32F: GLenum = 0x8815;
	const GL_RGBA16F: GLenum = 0x881A;
	const GL_RGB16F: GLenum = 0x881B;
	const GL_VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD;
	const GL_MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF;
	const GL_MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904;
	const GL_MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905;
	const GL_MAX_VARYING_COMPONENTS: GLenum = 0x8B4B;
	const GL_TEXTURE_2D_ARRAY: GLenum = 0x8C1A;
	const GL_TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D;
	const GL_R11F_G11F_B10F: GLenum = 0x8C3A;
	const GL_UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B;
	const GL_RGB9_E5: GLenum = 0x8C3D;
	const GL_UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E;
	const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = 0x8C76;
	const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F;
	const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80;
	const GL_TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83;
	const GL_TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84;
	const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85;
	const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88;
	const GL_RASTERIZER_DISCARD: GLenum = 0x8C89;
	const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A;
	const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B;
	const GL_INTERLEAVED_ATTRIBS: GLenum = 0x8C8C;
	const GL_SEPARATE_ATTRIBS: GLenum = 0x8C8D;
	const GL_TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E;
	const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F;
	const GL_RGBA32UI: GLenum = 0x8D70;
	const GL_RGB32UI: GLenum = 0x8D71;
	const GL_RGBA16UI: GLenum = 0x8D76;
	const GL_RGB16UI: GLenum = 0x8D77;
	const GL_RGBA8UI: GLenum = 0x8D7C;
	const GL_RGB8UI: GLenum = 0x8D7D;
	const GL_RGBA32I: GLenum = 0x8D82;
	const GL_RGB32I: GLenum = 0x8D83;
	const GL_RGBA16I: GLenum = 0x8D88;
	const GL_RGB16I: GLenum = 0x8D89;
	const GL_RGBA8I: GLenum = 0x8D8E;
	const GL_RGB8I: GLenum = 0x8D8F;
	const GL_RED_INTEGER: GLenum = 0x8D94;
	const GL_RGB_INTEGER: GLenum = 0x8D98;
	const GL_RGBA_INTEGER: GLenum = 0x8D99;
	const GL_SAMPLER_2D_ARRAY: GLenum = 0x8DC1;
	const GL_SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4;
	const GL_SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5;
	const GL_UNSIGNED_INT_VEC2: GLenum = 0x8DC6;
	const GL_UNSIGNED_INT_VEC3: GLenum = 0x8DC7;
	const GL_UNSIGNED_INT_VEC4: GLenum = 0x8DC8;
	const GL_INT_SAMPLER_2D: GLenum = 0x8DCA;
	const GL_INT_SAMPLER_3D: GLenum = 0x8DCB;
	const GL_INT_SAMPLER_CUBE: GLenum = 0x8DCC;
	const GL_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF;
	const GL_UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2;
	const GL_UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3;
	const GL_UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4;
	const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7;
	const GL_BUFFER_ACCESS_FLAGS: GLenum = 0x911F;
	const GL_BUFFER_MAP_LENGTH: GLenum = 0x9120;
	const GL_BUFFER_MAP_OFFSET: GLenum = 0x9121;
	const GL_DEPTH_COMPONENT32F: GLenum = 0x8CAC;
	const GL_DEPTH32F_STENCIL8: GLenum = 0x8CAD;
	const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD;
	const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210;
	const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211;
	const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212;
	const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213;
	const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214;
	const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215;
	const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216;
	const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217;
	const GL_FRAMEBUFFER_DEFAULT: GLenum = 0x8218;
	const GL_FRAMEBUFFER_UNDEFINED: GLenum = 0x8219;
	const GL_DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A;
	const GL_DEPTH_STENCIL: GLenum = 0x84F9;
	const GL_UNSIGNED_INT_24_8: GLenum = 0x84FA;
	const GL_DEPTH24_STENCIL8: GLenum = 0x88F0;
	const GL_UNSIGNED_NORMALIZED: GLenum = 0x8C17;
	const GL_DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
	const GL_READ_FRAMEBUFFER: GLenum = 0x8CA8;
	const GL_DRAW_FRAMEBUFFER: GLenum = 0x8CA9;
	const GL_READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA;
	const GL_RENDERBUFFER_SAMPLES: GLenum = 0x8CAB;
	const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4;
	const GL_MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF;
	const GL_COLOR_ATTACHMENT1: GLenum = 0x8CE1;
	const GL_COLOR_ATTACHMENT2: GLenum = 0x8CE2;
	const GL_COLOR_ATTACHMENT3: GLenum = 0x8CE3;
	const GL_COLOR_ATTACHMENT4: GLenum = 0x8CE4;
	const GL_COLOR_ATTACHMENT5: GLenum = 0x8CE5;
	const GL_COLOR_ATTACHMENT6: GLenum = 0x8CE6;
	const GL_COLOR_ATTACHMENT7: GLenum = 0x8CE7;
	const GL_COLOR_ATTACHMENT8: GLenum = 0x8CE8;
	const GL_COLOR_ATTACHMENT9: GLenum = 0x8CE9;
	const GL_COLOR_ATTACHMENT10: GLenum = 0x8CEA;
	const GL_COLOR_ATTACHMENT11: GLenum = 0x8CEB;
	const GL_COLOR_ATTACHMENT12: GLenum = 0x8CEC;
	const GL_COLOR_ATTACHMENT13: GLenum = 0x8CED;
	const GL_COLOR_ATTACHMENT14: GLenum = 0x8CEE;
	const GL_COLOR_ATTACHMENT15: GLenum = 0x8CEF;
	const GL_COLOR_ATTACHMENT16: GLenum = 0x8CF0;
	const GL_COLOR_ATTACHMENT17: GLenum = 0x8CF1;
	const GL_COLOR_ATTACHMENT18: GLenum = 0x8CF2;
	const GL_COLOR_ATTACHMENT19: GLenum = 0x8CF3;
	const GL_COLOR_ATTACHMENT20: GLenum = 0x8CF4;
	const GL_COLOR_ATTACHMENT21: GLenum = 0x8CF5;
	const GL_COLOR_ATTACHMENT22: GLenum = 0x8CF6;
	const GL_COLOR_ATTACHMENT23: GLenum = 0x8CF7;
	const GL_COLOR_ATTACHMENT24: GLenum = 0x8CF8;
	const GL_COLOR_ATTACHMENT25: GLenum = 0x8CF9;
	const GL_COLOR_ATTACHMENT26: GLenum = 0x8CFA;
	const GL_COLOR_ATTACHMENT27: GLenum = 0x8CFB;
	const GL_COLOR_ATTACHMENT28: GLenum = 0x8CFC;
	const GL_COLOR_ATTACHMENT29: GLenum = 0x8CFD;
	const GL_COLOR_ATTACHMENT30: GLenum = 0x8CFE;
	const GL_COLOR_ATTACHMENT31: GLenum = 0x8CFF;
	const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56;
	const GL_MAX_SAMPLES: GLenum = 0x8D57;
	const GL_HALF_FLOAT: GLenum = 0x140B;
	const GL_MAP_READ_BIT: GLenum = 0x0001;
	const GL_MAP_WRITE_BIT: GLenum = 0x0002;
	const GL_MAP_INVALIDATE_RANGE_BIT: GLenum = 0x0004;
	const GL_MAP_INVALIDATE_BUFFER_BIT: GLenum = 0x0008;
	const GL_MAP_FLUSH_EXPLICIT_BIT: GLenum = 0x0010;
	const GL_MAP_UNSYNCHRONIZED_BIT: GLenum = 0x0020;
	const GL_RG: GLenum = 0x8227;
	const GL_RG_INTEGER: GLenum = 0x8228;
	const GL_R8: GLenum = 0x8229;
	const GL_RG8: GLenum = 0x822B;
	const GL_R16F: GLenum = 0x822D;
	const GL_R32F: GLenum = 0x822E;
	const GL_RG16F: GLenum = 0x822F;
	const GL_RG32F: GLenum = 0x8230;
	const GL_R8I: GLenum = 0x8231;
	const GL_R8UI: GLenum = 0x8232;
	const GL_R16I: GLenum = 0x8233;
	const GL_R16UI: GLenum = 0x8234;
	const GL_R32I: GLenum = 0x8235;
	const GL_R32UI: GLenum = 0x8236;
	const GL_RG8I: GLenum = 0x8237;
	const GL_RG8UI: GLenum = 0x8238;
	const GL_RG16I: GLenum = 0x8239;
	const GL_RG16UI: GLenum = 0x823A;
	const GL_RG32I: GLenum = 0x823B;
	const GL_RG32UI: GLenum = 0x823C;
	const GL_VERTEX_ARRAY_BINDING: GLenum = 0x85B5;
	const GL_R8_SNORM: GLenum = 0x8F94;
	const GL_RG8_SNORM: GLenum = 0x8F95;
	const GL_RGB8_SNORM: GLenum = 0x8F96;
	const GL_RGBA8_SNORM: GLenum = 0x8F97;
	const GL_SIGNED_NORMALIZED: GLenum = 0x8F9C;
	const GL_PRIMITIVE_RESTART_FIXED_INDEX: GLenum = 0x8D69;
	const GL_COPY_READ_BUFFER: GLenum = 0x8F36;
	const GL_COPY_WRITE_BUFFER: GLenum = 0x8F37;
	const GL_COPY_READ_BUFFER_BINDING: GLenum = 0x8F36;
	const GL_COPY_WRITE_BUFFER_BINDING: GLenum = 0x8F37;
	const GL_UNIFORM_BUFFER: GLenum = 0x8A11;
	const GL_UNIFORM_BUFFER_BINDING: GLenum = 0x8A28;
	const GL_UNIFORM_BUFFER_START: GLenum = 0x8A29;
	const GL_UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A;
	const GL_MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B;
	const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D;
	const GL_MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E;
	const GL_MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F;
	const GL_MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30;
	const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31;
	const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33;
	const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34;
	const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = 0x8A35;
	const GL_ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36;
	const GL_UNIFORM_TYPE: GLenum = 0x8A37;
	const GL_UNIFORM_SIZE: GLenum = 0x8A38;
	const GL_UNIFORM_NAME_LENGTH: GLenum = 0x8A39;
	const GL_UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A;
	const GL_UNIFORM_OFFSET: GLenum = 0x8A3B;
	const GL_UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C;
	const GL_UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D;
	const GL_UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E;
	const GL_UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F;
	const GL_UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40;
	const GL_UNIFORM_BLOCK_NAME_LENGTH: GLenum = 0x8A41;
	const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42;
	const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43;
	const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44;
	const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46;
	const GL_INVALID_INDEX: GLenum = 0xFFFFFFFF;
	const GL_MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122;
	const GL_MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125;
	const GL_MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111;
	const GL_OBJECT_TYPE: GLenum = 0x9112;
	const GL_SYNC_CONDITION: GLenum = 0x9113;
	const GL_SYNC_STATUS: GLenum = 0x9114;
	const GL_SYNC_FLAGS: GLenum = 0x9115;
	const GL_SYNC_FENCE: GLenum = 0x9116;
	const GL_SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117;
	const GL_UNSIGNALED: GLenum = 0x9118;
	const GL_SIGNALED: GLenum = 0x9119;
	const GL_ALREADY_SIGNALED: GLenum = 0x911A;
	const GL_TIMEOUT_EXPIRED: GLenum = 0x911B;
	const GL_CONDITION_SATISFIED: GLenum = 0x911C;
	const GL_WAIT_FAILED: GLenum = 0x911D;
	const GL_SYNC_FLUSH_COMMANDS_BIT: GLenum = 0x00000001;
	const GL_TIMEOUT_IGNORED: GLenum = 0xFFFFFFFFFFFFFFFF;
	const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE;
	const GL_ANY_SAMPLES_PASSED: GLenum = 0x8C2F;
	const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = 0x8D6A;
	const GL_SAMPLER_BINDING: GLenum = 0x8919;
	const GL_RGB10_A2UI: GLenum = 0x906F;
	const GL_TEXTURE_SWIZZLE_R: GLenum = 0x8E42;
	const GL_TEXTURE_SWIZZLE_G: GLenum = 0x8E43;
	const GL_TEXTURE_SWIZZLE_B: GLenum = 0x8E44;
	const GL_TEXTURE_SWIZZLE_A: GLenum = 0x8E45;
	const GL_GREEN: GLenum = 0x1904;
	const GL_BLUE: GLenum = 0x1905;
	const GL_INT_2_10_10_10_REV: GLenum = 0x8D9F;
	const GL_TRANSFORM_FEEDBACK: GLenum = 0x8E22;
	const GL_TRANSFORM_FEEDBACK_PAUSED: GLenum = 0x8E23;
	const GL_TRANSFORM_FEEDBACK_ACTIVE: GLenum = 0x8E24;
	const GL_TRANSFORM_FEEDBACK_BINDING: GLenum = 0x8E25;
	const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = 0x8257;
	const GL_PROGRAM_BINARY_LENGTH: GLenum = 0x8741;
	const GL_NUM_PROGRAM_BINARY_FORMATS: GLenum = 0x87FE;
	const GL_PROGRAM_BINARY_FORMATS: GLenum = 0x87FF;
	const GL_COMPRESSED_R11_EAC: GLenum = 0x9270;
	const GL_COMPRESSED_SIGNED_R11_EAC: GLenum = 0x9271;
	const GL_COMPRESSED_RG11_EAC: GLenum = 0x9272;
	const GL_COMPRESSED_SIGNED_RG11_EAC: GLenum = 0x9273;
	const GL_COMPRESSED_RGB8_ETC2: GLenum = 0x9274;
	const GL_COMPRESSED_SRGB8_ETC2: GLenum = 0x9275;
	const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9276;
	const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9277;
	const GL_COMPRESSED_RGBA8_ETC2_EAC: GLenum = 0x9278;
	const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = 0x9279;
	const GL_TEXTURE_IMMUTABLE_FORMAT: GLenum = 0x912F;
	const GL_MAX_ELEMENT_INDEX: GLenum = 0x8D6B;
	const GL_NUM_SAMPLE_COUNTS: GLenum = 0x9380;
	const GL_TEXTURE_IMMUTABLE_LEVELS: GLenum = 0x82DF;
	extern fn glReadBuffer(src: GLenum) void;
	extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *const void) void;
	extern fn glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *const void) void;
	extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *const void) void;
	extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
	extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const void) void;
	extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const void) void;
	extern fn glGenQueries(n: GLsizei, ids: * GLuint) void;
	extern fn glDeleteQueries(n: GLsizei, ids: *const GLuint) void;
	extern fn glIsQuery(id: GLuint) GLboolean;
	extern fn glBeginQuery(target: GLenum, id: GLuint) void;
	extern fn glEndQuery(target: GLenum) void;
	extern fn glGetQueryiv(target: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: * GLuint) void;
	extern fn glDrawBuffers(n: GLsizei, bufs: *const GLenum) void;
	extern fn glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) void;
	extern fn glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
	extern fn glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) void;
	extern fn glBindVertexArray(array: GLuint) void;
	extern fn glDeleteVertexArrays(n: GLsizei, arrays: *const GLuint) void;
	extern fn glGenVertexArrays(n: GLsizei, arrays: * GLuint) void;
	extern fn glIsVertexArray(array: GLuint) GLboolean;
	extern fn glGetIntegeri_v(target: GLenum, index: GLuint, data: * GLint) void;
	extern fn glBeginTransformFeedback(primitiveMode: GLenum) void;
	extern fn glEndTransformFeedback() void;
	extern fn glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) void;
	extern fn glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) void;
	extern fn glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: *const*const GLchar, bufferMode: GLenum) void;
	extern fn glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: * GLsizei, size: * GLsizei, type: * GLenum, name: * GLchar) void;
	extern fn glVertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *const void) void;
	extern fn glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: * GLuint) void;
	extern fn glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) void;
	extern fn glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) void;
	extern fn glVertexAttribI4iv(index: GLuint, v: *const GLint) void;
	extern fn glVertexAttribI4uiv(index: GLuint, v: *const GLuint) void;
	extern fn glGetUniformuiv(program: GLuint, location: GLint, params: * GLuint) void;
	extern fn glGetFragDataLocation(program: GLuint, name: *const GLchar) GLint;
	extern fn glUniform1ui(location: GLint, v0: GLuint) void;
	extern fn glUniform2ui(location: GLint, v0: GLuint, v1: GLuint) void;
	extern fn glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
	extern fn glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
	extern fn glUniform1uiv(location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glUniform2uiv(location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glUniform3uiv(location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glUniform4uiv(location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint) void;
	extern fn glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint) void;
	extern fn glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) void;
	extern fn glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) void;
	extern fn glGetStringi(name: GLenum, index: GLuint) [*]const GLubyte;
	extern fn glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) void;
	extern fn glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: *const*const GLchar, uniformIndices: * GLuint) void;
	extern fn glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) GLuint;
	extern fn glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: * GLsizei, uniformBlockName: * GLchar) void;
	extern fn glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) void;
	extern fn glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) void;
	extern fn glDrawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, indices: *const void, instancecount: GLsizei) void;
	extern fn glFenceSync(condition: GLenum, flags: GLbitfield) GLsync;
	extern fn glIsSync(sync: GLsync) GLboolean;
	extern fn glDeleteSync(sync: GLsync) void;
	extern fn glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) GLenum;
	extern fn glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) void;
	extern fn glGetInteger64v(pname: GLenum, data: * GLint64) void;
	extern fn glGetSynciv(sync: GLsync, pname: GLenum, count: GLsizei, length: * GLsizei, values: * GLint) void;
	extern fn glGetInteger64i_v(target: GLenum, index: GLuint, data: * GLint64) void;
	extern fn glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: * GLint64) void;
	extern fn glGenSamplers(count: GLsizei, samplers: * GLuint) void;
	extern fn glDeleteSamplers(count: GLsizei, samplers: *const GLuint) void;
	extern fn glIsSampler(sampler: GLuint) GLboolean;
	extern fn glBindSampler(unit: GLuint, sampler: GLuint) void;
	extern fn glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) void;
	extern fn glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint) void;
	extern fn glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) void;
	extern fn glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat) void;
	extern fn glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: * GLfloat) void;
	extern fn glVertexAttribDivisor(index: GLuint, divisor: GLuint) void;
	extern fn glBindTransformFeedback(target: GLenum, id: GLuint) void;
	extern fn glDeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint) void;
	extern fn glGenTransformFeedbacks(n: GLsizei, ids: * GLuint) void;
	extern fn glIsTransformFeedback(id: GLuint) GLboolean;
	extern fn glPauseTransformFeedback() void;
	extern fn glResumeTransformFeedback() void;
	extern fn glGetProgramBinary(program: GLuint, bufSize: GLsizei, length: * GLsizei, binaryFormat: * GLenum, binary: * void) void;
	extern fn glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *const void, length: GLsizei) void;
	extern fn glProgramParameteri(program: GLuint, pname: GLenum, value: GLint) void;
	extern fn glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum) void;
	extern fn glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
	extern fn glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
	extern fn glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) void;
	extern fn glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: * GLint) void;
};

const v3_1 = struct {
	usingnamespace v2_0;
	usingnamespace v3_0;

	const GLbyte = v2_0.GLbyte;
	const GLclampf = v2_0.GLclampf;
	const GLfixed = v2_0.GLfixed;
	const GLshort = v2_0.GLshort;
	const GLushort = v2_0.GLushort;
	const GLvoid = v2_0.GLvoid;
	const GLsync = v2_0.GLsync;
	const GLint64 = v2_0.GLint64;
	const GLuint64 = v2_0.GLuint64;
	const GLenum = v2_0.GLenum;
	const GLuint = v2_0.GLuint;
	const GLchar = v2_0.GLchar;
	const GLfloat = v2_0.GLfloat;
	const GLsizeiptr = v2_0.GLsizeiptr;
	const GLintptr = v2_0.GLintptr;
	const GLbitfield = v2_0.GLbitfield;
	const GLint = v2_0.GLint;
	const GLboolean = v2_0.GLboolean;
	const GLsizei = v2_0.GLsizei;
	const GLubyte = v2_0.GLubyte;
	const GLhalf = v3_0.GLhalf;
	const GL_COMPUTE_SHADER: GLenum = 0x91B9;
	const GL_MAX_COMPUTE_UNIFORM_BLOCKS: GLenum = 0x91BB;
	const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: GLenum = 0x91BC;
	const GL_MAX_COMPUTE_IMAGE_UNIFORMS: GLenum = 0x91BD;
	const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: GLenum = 0x8262;
	const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8263;
	const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x8264;
	const GL_MAX_COMPUTE_ATOMIC_COUNTERS: GLenum = 0x8265;
	const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8266;
	const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: GLenum = 0x90EB;
	const GL_MAX_COMPUTE_WORK_GROUP_COUNT: GLenum = 0x91BE;
	const GL_MAX_COMPUTE_WORK_GROUP_SIZE: GLenum = 0x91BF;
	const GL_COMPUTE_WORK_GROUP_SIZE: GLenum = 0x8267;
	const GL_DISPATCH_INDIRECT_BUFFER: GLenum = 0x90EE;
	const GL_DISPATCH_INDIRECT_BUFFER_BINDING: GLenum = 0x90EF;
	const GL_COMPUTE_SHADER_BIT: GLenum = 0x00000020;
	const GL_DRAW_INDIRECT_BUFFER: GLenum = 0x8F3F;
	const GL_DRAW_INDIRECT_BUFFER_BINDING: GLenum = 0x8F43;
	const GL_MAX_UNIFORM_LOCATIONS: GLenum = 0x826E;
	const GL_FRAMEBUFFER_DEFAULT_WIDTH: GLenum = 0x9310;
	const GL_FRAMEBUFFER_DEFAULT_HEIGHT: GLenum = 0x9311;
	const GL_FRAMEBUFFER_DEFAULT_SAMPLES: GLenum = 0x9313;
	const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9314;
	const GL_MAX_FRAMEBUFFER_WIDTH: GLenum = 0x9315;
	const GL_MAX_FRAMEBUFFER_HEIGHT: GLenum = 0x9316;
	const GL_MAX_FRAMEBUFFER_SAMPLES: GLenum = 0x9318;
	const GL_UNIFORM: GLenum = 0x92E1;
	const GL_UNIFORM_BLOCK: GLenum = 0x92E2;
	const GL_PROGRAM_INPUT: GLenum = 0x92E3;
	const GL_PROGRAM_OUTPUT: GLenum = 0x92E4;
	const GL_BUFFER_VARIABLE: GLenum = 0x92E5;
	const GL_SHADER_STORAGE_BLOCK: GLenum = 0x92E6;
	const GL_ATOMIC_COUNTER_BUFFER: GLenum = 0x92C0;
	const GL_TRANSFORM_FEEDBACK_VARYING: GLenum = 0x92F4;
	const GL_ACTIVE_RESOURCES: GLenum = 0x92F5;
	const GL_MAX_NAME_LENGTH: GLenum = 0x92F6;
	const GL_MAX_NUM_ACTIVE_VARIABLES: GLenum = 0x92F7;
	const GL_NAME_LENGTH: GLenum = 0x92F9;
	const GL_TYPE: GLenum = 0x92FA;
	const GL_ARRAY_SIZE: GLenum = 0x92FB;
	const GL_OFFSET: GLenum = 0x92FC;
	const GL_BLOCK_INDEX: GLenum = 0x92FD;
	const GL_ARRAY_STRIDE: GLenum = 0x92FE;
	const GL_MATRIX_STRIDE: GLenum = 0x92FF;
	const GL_IS_ROW_MAJOR: GLenum = 0x9300;
	const GL_ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x9301;
	const GL_BUFFER_BINDING: GLenum = 0x9302;
	const GL_BUFFER_DATA_SIZE: GLenum = 0x9303;
	const GL_NUM_ACTIVE_VARIABLES: GLenum = 0x9304;
	const GL_ACTIVE_VARIABLES: GLenum = 0x9305;
	const GL_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x9306;
	const GL_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x930A;
	const GL_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x930B;
	const GL_TOP_LEVEL_ARRAY_SIZE: GLenum = 0x930C;
	const GL_TOP_LEVEL_ARRAY_STRIDE: GLenum = 0x930D;
	const GL_LOCATION: GLenum = 0x930E;
	const GL_VERTEX_SHADER_BIT: GLenum = 0x00000001;
	const GL_FRAGMENT_SHADER_BIT: GLenum = 0x00000002;
	const GL_ALL_SHADER_BITS: GLenum = 0xFFFFFFFF;
	const GL_PROGRAM_SEPARABLE: GLenum = 0x8258;
	const GL_ACTIVE_PROGRAM: GLenum = 0x8259;
	const GL_PROGRAM_PIPELINE_BINDING: GLenum = 0x825A;
	const GL_ATOMIC_COUNTER_BUFFER_BINDING: GLenum = 0x92C1;
	const GL_ATOMIC_COUNTER_BUFFER_START: GLenum = 0x92C2;
	const GL_ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92C3;
	const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CC;
	const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D0;
	const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D1;
	const GL_MAX_VERTEX_ATOMIC_COUNTERS: GLenum = 0x92D2;
	const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: GLenum = 0x92D6;
	const GL_MAX_COMBINED_ATOMIC_COUNTERS: GLenum = 0x92D7;
	const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92D8;
	const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: GLenum = 0x92DC;
	const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D9;
	const GL_UNSIGNED_INT_ATOMIC_COUNTER: GLenum = 0x92DB;
	const GL_MAX_IMAGE_UNITS: GLenum = 0x8F38;
	const GL_MAX_VERTEX_IMAGE_UNIFORMS: GLenum = 0x90CA;
	const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: GLenum = 0x90CE;
	const GL_MAX_COMBINED_IMAGE_UNIFORMS: GLenum = 0x90CF;
	const GL_IMAGE_BINDING_NAME: GLenum = 0x8F3A;
	const GL_IMAGE_BINDING_LEVEL: GLenum = 0x8F3B;
	const GL_IMAGE_BINDING_LAYERED: GLenum = 0x8F3C;
	const GL_IMAGE_BINDING_LAYER: GLenum = 0x8F3D;
	const GL_IMAGE_BINDING_ACCESS: GLenum = 0x8F3E;
	const GL_IMAGE_BINDING_FORMAT: GLenum = 0x906E;
	const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: GLenum = 0x00000001;
	const GL_ELEMENT_ARRAY_BARRIER_BIT: GLenum = 0x00000002;
	const GL_UNIFORM_BARRIER_BIT: GLenum = 0x00000004;
	const GL_TEXTURE_FETCH_BARRIER_BIT: GLenum = 0x00000008;
	const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: GLenum = 0x00000020;
	const GL_COMMAND_BARRIER_BIT: GLenum = 0x00000040;
	const GL_PIXEL_BUFFER_BARRIER_BIT: GLenum = 0x00000080;
	const GL_TEXTURE_UPDATE_BARRIER_BIT: GLenum = 0x00000100;
	const GL_BUFFER_UPDATE_BARRIER_BIT: GLenum = 0x00000200;
	const GL_FRAMEBUFFER_BARRIER_BIT: GLenum = 0x00000400;
	const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: GLenum = 0x00000800;
	const GL_ATOMIC_COUNTER_BARRIER_BIT: GLenum = 0x00001000;
	const GL_ALL_BARRIER_BITS: GLenum = 0xFFFFFFFF;
	const GL_IMAGE_2D: GLenum = 0x904D;
	const GL_IMAGE_3D: GLenum = 0x904E;
	const GL_IMAGE_CUBE: GLenum = 0x9050;
	const GL_IMAGE_2D_ARRAY: GLenum = 0x9053;
	const GL_INT_IMAGE_2D: GLenum = 0x9058;
	const GL_INT_IMAGE_3D: GLenum = 0x9059;
	const GL_INT_IMAGE_CUBE: GLenum = 0x905B;
	const GL_INT_IMAGE_2D_ARRAY: GLenum = 0x905E;
	const GL_UNSIGNED_INT_IMAGE_2D: GLenum = 0x9063;
	const GL_UNSIGNED_INT_IMAGE_3D: GLenum = 0x9064;
	const GL_UNSIGNED_INT_IMAGE_CUBE: GLenum = 0x9066;
	const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: GLenum = 0x9069;
	const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: GLenum = 0x90C7;
	const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: GLenum = 0x90C8;
	const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: GLenum = 0x90C9;
	const GL_READ_ONLY: GLenum = 0x88B8;
	const GL_WRITE_ONLY: GLenum = 0x88B9;
	const GL_READ_WRITE: GLenum = 0x88BA;
	const GL_SHADER_STORAGE_BUFFER: GLenum = 0x90D2;
	const GL_SHADER_STORAGE_BUFFER_BINDING: GLenum = 0x90D3;
	const GL_SHADER_STORAGE_BUFFER_START: GLenum = 0x90D4;
	const GL_SHADER_STORAGE_BUFFER_SIZE: GLenum = 0x90D5;
	const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: GLenum = 0x90D6;
	const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: GLenum = 0x90DA;
	const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: GLenum = 0x90DB;
	const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: GLenum = 0x90DC;
	const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: GLenum = 0x90DD;
	const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: GLenum = 0x90DE;
	const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x90DF;
	const GL_SHADER_STORAGE_BARRIER_BIT: GLenum = 0x00002000;
	const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: GLenum = 0x8F39;
	const GL_DEPTH_STENCIL_TEXTURE_MODE: GLenum = 0x90EA;
	const GL_STENCIL_INDEX: GLenum = 0x1901;
	const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5E;
	const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5F;
	const GL_SAMPLE_POSITION: GLenum = 0x8E50;
	const GL_SAMPLE_MASK: GLenum = 0x8E51;
	const GL_SAMPLE_MASK_VALUE: GLenum = 0x8E52;
	const GL_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9100;
	const GL_MAX_SAMPLE_MASK_WORDS: GLenum = 0x8E59;
	const GL_MAX_COLOR_TEXTURE_SAMPLES: GLenum = 0x910E;
	const GL_MAX_DEPTH_TEXTURE_SAMPLES: GLenum = 0x910F;
	const GL_MAX_INTEGER_SAMPLES: GLenum = 0x9110;
	const GL_TEXTURE_BINDING_2D_MULTISAMPLE: GLenum = 0x9104;
	const GL_TEXTURE_SAMPLES: GLenum = 0x9106;
	const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9107;
	const GL_TEXTURE_WIDTH: GLenum = 0x1000;
	const GL_TEXTURE_HEIGHT: GLenum = 0x1001;
	const GL_TEXTURE_DEPTH: GLenum = 0x8071;
	const GL_TEXTURE_INTERNAL_FORMAT: GLenum = 0x1003;
	const GL_TEXTURE_RED_SIZE: GLenum = 0x805C;
	const GL_TEXTURE_GREEN_SIZE: GLenum = 0x805D;
	const GL_TEXTURE_BLUE_SIZE: GLenum = 0x805E;
	const GL_TEXTURE_ALPHA_SIZE: GLenum = 0x805F;
	const GL_TEXTURE_DEPTH_SIZE: GLenum = 0x884A;
	const GL_TEXTURE_STENCIL_SIZE: GLenum = 0x88F1;
	const GL_TEXTURE_SHARED_SIZE: GLenum = 0x8C3F;
	const GL_TEXTURE_RED_TYPE: GLenum = 0x8C10;
	const GL_TEXTURE_GREEN_TYPE: GLenum = 0x8C11;
	const GL_TEXTURE_BLUE_TYPE: GLenum = 0x8C12;
	const GL_TEXTURE_ALPHA_TYPE: GLenum = 0x8C13;
	const GL_TEXTURE_DEPTH_TYPE: GLenum = 0x8C16;
	const GL_TEXTURE_COMPRESSED: GLenum = 0x86A1;
	const GL_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9108;
	const GL_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9109;
	const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x910A;
	const GL_VERTEX_ATTRIB_BINDING: GLenum = 0x82D4;
	const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D5;
	const GL_VERTEX_BINDING_DIVISOR: GLenum = 0x82D6;
	const GL_VERTEX_BINDING_OFFSET: GLenum = 0x82D7;
	const GL_VERTEX_BINDING_STRIDE: GLenum = 0x82D8;
	const GL_VERTEX_BINDING_BUFFER: GLenum = 0x8F4F;
	const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D9;
	const GL_MAX_VERTEX_ATTRIB_BINDINGS: GLenum = 0x82DA;
	const GL_MAX_VERTEX_ATTRIB_STRIDE: GLenum = 0x82E5;
	extern fn glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) void;
	extern fn glDispatchComputeIndirect(indirect: GLintptr) void;
	extern fn glDrawArraysIndirect(mode: GLenum, indirect: *const void) void;
	extern fn glDrawElementsIndirect(mode: GLenum, type: GLenum, indirect: *const void) void;
	extern fn glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) void;
	extern fn glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: * GLint) void;
	extern fn glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) GLuint;
	extern fn glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: * GLsizei, name: * GLchar) void;
	extern fn glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, count: GLsizei, length: * GLsizei, params: * GLint) void;
	extern fn glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *const GLchar) GLint;
	extern fn glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) void;
	extern fn glActiveShaderProgram(pipeline: GLuint, program: GLuint) void;
	extern fn glCreateShaderProgramv(type: GLenum, count: GLsizei, strings: *const*const GLchar) GLuint;
	extern fn glBindProgramPipeline(pipeline: GLuint) void;
	extern fn glDeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint) void;
	extern fn glGenProgramPipelines(n: GLsizei, pipelines: * GLuint) void;
	extern fn glIsProgramPipeline(pipeline: GLuint) GLboolean;
	extern fn glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: * GLint) void;
	extern fn glProgramUniform1i(program: GLuint, location: GLint, v0: GLint) void;
	extern fn glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) void;
	extern fn glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
	extern fn glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
	extern fn glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) void;
	extern fn glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) void;
	extern fn glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) void;
	extern fn glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) void;
	extern fn glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) void;
	extern fn glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) void;
	extern fn glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
	extern fn glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
	extern fn glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) void;
	extern fn glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) void;
	extern fn glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) void;
	extern fn glValidateProgramPipeline(pipeline: GLuint) void;
	extern fn glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: * GLsizei, infoLog: * GLchar) void;
	extern fn glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) void;
	extern fn glGetBooleani_v(target: GLenum, index: GLuint, data: * GLboolean) void;
	extern fn glMemoryBarrier(barriers: GLbitfield) void;
	extern fn glMemoryBarrierByRegion(barriers: GLbitfield) void;
	extern fn glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) void;
	extern fn glGetMultisamplefv(pname: GLenum, index: GLuint, val: * GLfloat) void;
	extern fn glSampleMaski(maskNumber: GLuint, mask: GLbitfield) void;
	extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: * GLint) void;
	extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: * GLfloat) void;
	extern fn glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) void;
	extern fn glVertexAttribFormat(attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) void;
	extern fn glVertexAttribIFormat(attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) void;
	extern fn glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) void;
	extern fn glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) void;
};

